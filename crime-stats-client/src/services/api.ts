/**
 * CrimeStats.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "http://localhost:54054".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
};

export interface ModelObject {
}

export interface ODataResponseListReportedCrime {
    "@OdataContext"?: string;
    "value"?: Array<ReportedCrime>;
}

export interface ReportedCrime {
    "id"?: number;
    "month"?: string;
    "reportedBy"?: string;
    "fallsWithin"?: string;
    "longitude"?: number;
    "latitude"?: number;
    "location"?: string;
    "lsoaCode"?: string;
    "lsoaName"?: string;
    "crimetype"?: string;
}



/**
 * ReportedCrimesApi - fetch parameter creator
 */
export const ReportedCrimesApiFetchParamCreator = {
    /** 
     * Delete entity in EntitySet ReportedCrimes
     * @param id key: id
     * @param ifMatch If-Match header
     */
    reportedCrimesDeleteById(params: {  "id": number; "ifMatch"?: string; }, options?: any): FetchArgs {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling reportedCrimesDeleteById");
        }
        const baseUrl = `/odata/ReportedCrimes({id})`
            .replace(`{${"id"}}`, `${ params["id"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        fetchOptions.headers = Object.assign({
            "If-Match": params["ifMatch"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Returns the entity with the key from ReportedCrimes
     * @param id key: id
     * @param $Expand Expands related entities inline.
     * @param $Select Selects which properties to include in the response.
     */
    reportedCrimesGetReportedCrimeById(params: {  "id": number; "$Expand"?: string; "$Select"?: string; }, options?: any): FetchArgs {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling reportedCrimesGetReportedCrimeById");
        }
        const baseUrl = `/odata/ReportedCrimes({id})`
            .replace(`{${"id"}}`, `${ params["id"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = Object.assign({}, urlObj.query, {
            "$expand": params["$Expand"],
            "$select": params["$Select"],
        });
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Returns the EntitySet ReportedCrimes
     * @param $Expand Expands related entities inline.
     * @param $Filter Filters the results, based on a Boolean condition.
     * @param $Select Selects which properties to include in the response.
     * @param $Orderby Sorts the results.
     * @param $Top Returns only the first n results.
     * @param $Skip Skips the first n results.
     * @param $Count Includes a count of the matching results in the response.
     */
    reportedCrimesGetReportedCrimes1(params: {  "$Expand"?: string; "$Filter"?: string; "$Select"?: string; "$Orderby"?: string; "$Top"?: number; "$Skip"?: number; "$Count"?: boolean; }, options?: any): FetchArgs {
        const baseUrl = `/odata/ReportedCrimes`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = Object.assign({}, urlObj.query, {
            //"$expand": params["$Expand"],
            //"$filter": params["$Filter"],
            //"$select": params["$Select"],
            //"$orderby": params["$Orderby"],
            "$top": params["$Top"],
            //"$skip": params["$Skip"],
            //"$count": params["$Count"],
        });
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * @param $Expand Expands related entities inline.
     * @param $Filter Filters the results, based on a Boolean condition.
     * @param $Select Selects which properties to include in the response.
     * @param $Orderby Sorts the results.
     * @param $Top Returns only the first n results.
     * @param $Skip Skips the first n results.
     * @param $Count Includes a count of the matching results in the response.
     */
    reportedCrimesGetReportedCrimes2(params: {  "$Expand"?: string; "$Filter"?: string; "$Select"?: string; "$Orderby"?: string; "$Top"?: number; "$Skip"?: number; "$Count"?: boolean; }, options?: any): FetchArgs {
        const baseUrl = `/odata/`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = Object.assign({}, urlObj.query, {
            "$expand": params["$Expand"],
            "$filter": params["$Filter"],
            "$select": params["$Select"],
            "$orderby": params["$Orderby"],
            "$top": params["$Top"],
            "$skip": params["$Skip"],
            "$count": params["$Count"],
        });
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Update entity in EntitySet ReportedCrimes
     * @param id key: id
     * @param reportedCrime The entity to patch
     */
    reportedCrimesPatchById(params: {  "id": number; "reportedCrime": ReportedCrime; }, options?: any): FetchArgs {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling reportedCrimesPatchById");
        }
        // verify required parameter "reportedCrime" is set
        if (params["reportedCrime"] == null) {
            throw new Error("Missing required parameter reportedCrime when calling reportedCrimesPatchById");
        }
        const baseUrl = `/odata/ReportedCrimes({id})`
            .replace(`{${"id"}}`, `${ params["id"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "PATCH" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["reportedCrime"]) {
            fetchOptions.body = JSON.stringify(params["reportedCrime"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Post a new entity to EntitySet ReportedCrimes
     * @param reportedCrime The entity to post
     */
    reportedCrimesPost(params: {  "reportedCrime": ReportedCrime; }, options?: any): FetchArgs {
        // verify required parameter "reportedCrime" is set
        if (params["reportedCrime"] == null) {
            throw new Error("Missing required parameter reportedCrime when calling reportedCrimesPost");
        }
        const baseUrl = `/odata/ReportedCrimes`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["reportedCrime"]) {
            fetchOptions.body = JSON.stringify(params["reportedCrime"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Replace entity in EntitySet ReportedCrimes
     * @param id key: id
     * @param reportedCrime The entity to put
     */
    reportedCrimesPutById(params: {  "id": number; "reportedCrime": ReportedCrime; }, options?: any): FetchArgs {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling reportedCrimesPutById");
        }
        // verify required parameter "reportedCrime" is set
        if (params["reportedCrime"] == null) {
            throw new Error("Missing required parameter reportedCrime when calling reportedCrimesPutById");
        }
        const baseUrl = `/odata/ReportedCrimes({id})`
            .replace(`{${"id"}}`, `${ params["id"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["reportedCrime"]) {
            fetchOptions.body = JSON.stringify(params["reportedCrime"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * ReportedCrimesApi - functional programming interface
 */
export const ReportedCrimesApiFp = {
    /** 
     * Delete entity in EntitySet ReportedCrimes
     * @param id key: id
     * @param ifMatch If-Match header
     */
    reportedCrimesDeleteById(params: { "id": number; "ifMatch"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
        const fetchArgs = ReportedCrimesApiFetchParamCreator.reportedCrimesDeleteById(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Returns the entity with the key from ReportedCrimes
     * @param id key: id
     * @param $Expand Expands related entities inline.
     * @param $Select Selects which properties to include in the response.
     */
    reportedCrimesGetReportedCrimeById(params: { "id": number; "$Expand"?: string; "$Select"?: string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReportedCrime> {
        const fetchArgs = ReportedCrimesApiFetchParamCreator.reportedCrimesGetReportedCrimeById(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Returns the EntitySet ReportedCrimes
     * @param $Expand Expands related entities inline.
     * @param $Filter Filters the results, based on a Boolean condition.
     * @param $Select Selects which properties to include in the response.
     * @param $Orderby Sorts the results.
     * @param $Top Returns only the first n results.
     * @param $Skip Skips the first n results.
     * @param $Count Includes a count of the matching results in the response.
     */
    reportedCrimesGetReportedCrimes1(params: { "$Expand"?: string; "$Filter"?: string; "$Select"?: string; "$Orderby"?: string; "$Top"?: number; "$Skip"?: number; "$Count"?: boolean;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ODataResponseListReportedCrime> {
        const fetchArgs = ReportedCrimesApiFetchParamCreator.reportedCrimesGetReportedCrimes1(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * @param $Expand Expands related entities inline.
     * @param $Filter Filters the results, based on a Boolean condition.
     * @param $Select Selects which properties to include in the response.
     * @param $Orderby Sorts the results.
     * @param $Top Returns only the first n results.
     * @param $Skip Skips the first n results.
     * @param $Count Includes a count of the matching results in the response.
     */
    reportedCrimesGetReportedCrimes2(params: { "$Expand"?: string; "$Filter"?: string; "$Select"?: string; "$Orderby"?: string; "$Top"?: number; "$Skip"?: number; "$Count"?: boolean;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ODataResponseListReportedCrime> {
        const fetchArgs = ReportedCrimesApiFetchParamCreator.reportedCrimesGetReportedCrimes2(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Update entity in EntitySet ReportedCrimes
     * @param id key: id
     * @param reportedCrime The entity to patch
     */
    reportedCrimesPatchById(params: { "id": number; "reportedCrime": ReportedCrime;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
        const fetchArgs = ReportedCrimesApiFetchParamCreator.reportedCrimesPatchById(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Post a new entity to EntitySet ReportedCrimes
     * @param reportedCrime The entity to post
     */
    reportedCrimesPost(params: { "reportedCrime": ReportedCrime;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
        const fetchArgs = ReportedCrimesApiFetchParamCreator.reportedCrimesPost(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Replace entity in EntitySet ReportedCrimes
     * @param id key: id
     * @param reportedCrime The entity to put
     */
    reportedCrimesPutById(params: { "id": number; "reportedCrime": ReportedCrime;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelObject> {
        const fetchArgs = ReportedCrimesApiFetchParamCreator.reportedCrimesPutById(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * ReportedCrimesApi - object-oriented interface
 */
export class ReportedCrimesApi extends BaseAPI {
    /** 
     * Delete entity in EntitySet ReportedCrimes
     * @param id key: id
     * @param ifMatch If-Match header
     */
    reportedCrimesDeleteById(params: {  "id": number; "ifMatch"?: string; }, options?: any) {
        return ReportedCrimesApiFp.reportedCrimesDeleteById(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Returns the entity with the key from ReportedCrimes
     * @param id key: id
     * @param $Expand Expands related entities inline.
     * @param $Select Selects which properties to include in the response.
     */
    reportedCrimesGetReportedCrimeById(params: {  "id": number; "$Expand"?: string; "$Select"?: string; }, options?: any) {
        return ReportedCrimesApiFp.reportedCrimesGetReportedCrimeById(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Returns the EntitySet ReportedCrimes
     * @param $Expand Expands related entities inline.
     * @param $Filter Filters the results, based on a Boolean condition.
     * @param $Select Selects which properties to include in the response.
     * @param $Orderby Sorts the results.
     * @param $Top Returns only the first n results.
     * @param $Skip Skips the first n results.
     * @param $Count Includes a count of the matching results in the response.
     */
    reportedCrimesGetReportedCrimes1(params: {  "$Expand"?: string; "$Filter"?: string; "$Select"?: string; "$Orderby"?: string; "$Top"?: number; "$Skip"?: number; "$Count"?: boolean; }, options?: any) {
        return ReportedCrimesApiFp.reportedCrimesGetReportedCrimes1(params, options)(this.fetch, this.basePath);
    }
    /** 
     * @param $Expand Expands related entities inline.
     * @param $Filter Filters the results, based on a Boolean condition.
     * @param $Select Selects which properties to include in the response.
     * @param $Orderby Sorts the results.
     * @param $Top Returns only the first n results.
     * @param $Skip Skips the first n results.
     * @param $Count Includes a count of the matching results in the response.
     */
    reportedCrimesGetReportedCrimes2(params: {  "$Expand"?: string; "$Filter"?: string; "$Select"?: string; "$Orderby"?: string; "$Top"?: number; "$Skip"?: number; "$Count"?: boolean; }, options?: any) {
        return ReportedCrimesApiFp.reportedCrimesGetReportedCrimes2(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Update entity in EntitySet ReportedCrimes
     * @param id key: id
     * @param reportedCrime The entity to patch
     */
    reportedCrimesPatchById(params: {  "id": number; "reportedCrime": ReportedCrime; }, options?: any) {
        return ReportedCrimesApiFp.reportedCrimesPatchById(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Post a new entity to EntitySet ReportedCrimes
     * @param reportedCrime The entity to post
     */
    reportedCrimesPost(params: {  "reportedCrime": ReportedCrime; }, options?: any) {
        return ReportedCrimesApiFp.reportedCrimesPost(params, options)(this.fetch, this.basePath);
    }
    /** 
     * Replace entity in EntitySet ReportedCrimes
     * @param id key: id
     * @param reportedCrime The entity to put
     */
    reportedCrimesPutById(params: {  "id": number; "reportedCrime": ReportedCrime; }, options?: any) {
        return ReportedCrimesApiFp.reportedCrimesPutById(params, options)(this.fetch, this.basePath);
    }
};

/**
 * ReportedCrimesApi - factory interface
 */
export const ReportedCrimesApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /** 
         * Delete entity in EntitySet ReportedCrimes
         * @param id key: id
         * @param ifMatch If-Match header
         */
        reportedCrimesDeleteById(params: {  "id": number; "ifMatch"?: string; }, options?: any) {
            return ReportedCrimesApiFp.reportedCrimesDeleteById(params, options)(fetch, basePath);
        },
        /** 
         * Returns the entity with the key from ReportedCrimes
         * @param id key: id
         * @param $Expand Expands related entities inline.
         * @param $Select Selects which properties to include in the response.
         */
        reportedCrimesGetReportedCrimeById(params: {  "id": number; "$Expand"?: string; "$Select"?: string; }, options?: any) {
            return ReportedCrimesApiFp.reportedCrimesGetReportedCrimeById(params, options)(fetch, basePath);
        },
        /** 
         * Returns the EntitySet ReportedCrimes
         * @param $Expand Expands related entities inline.
         * @param $Filter Filters the results, based on a Boolean condition.
         * @param $Select Selects which properties to include in the response.
         * @param $Orderby Sorts the results.
         * @param $Top Returns only the first n results.
         * @param $Skip Skips the first n results.
         * @param $Count Includes a count of the matching results in the response.
         */
        reportedCrimesGetReportedCrimes1(params: {  "$Expand"?: string; "$Filter"?: string; "$Select"?: string; "$Orderby"?: string; "$Top"?: number; "$Skip"?: number; "$Count"?: boolean; }, options?: any) {
            return ReportedCrimesApiFp.reportedCrimesGetReportedCrimes1(params, options)(fetch, basePath);
        },
        /** 
         * @param $Expand Expands related entities inline.
         * @param $Filter Filters the results, based on a Boolean condition.
         * @param $Select Selects which properties to include in the response.
         * @param $Orderby Sorts the results.
         * @param $Top Returns only the first n results.
         * @param $Skip Skips the first n results.
         * @param $Count Includes a count of the matching results in the response.
         */
        reportedCrimesGetReportedCrimes2(params: {  "$Expand"?: string; "$Filter"?: string; "$Select"?: string; "$Orderby"?: string; "$Top"?: number; "$Skip"?: number; "$Count"?: boolean; }, options?: any) {
            return ReportedCrimesApiFp.reportedCrimesGetReportedCrimes2(params, options)(fetch, basePath);
        },
        /** 
         * Update entity in EntitySet ReportedCrimes
         * @param id key: id
         * @param reportedCrime The entity to patch
         */
        reportedCrimesPatchById(params: {  "id": number; "reportedCrime": ReportedCrime; }, options?: any) {
            return ReportedCrimesApiFp.reportedCrimesPatchById(params, options)(fetch, basePath);
        },
        /** 
         * Post a new entity to EntitySet ReportedCrimes
         * @param reportedCrime The entity to post
         */
        reportedCrimesPost(params: {  "reportedCrime": ReportedCrime; }, options?: any) {
            return ReportedCrimesApiFp.reportedCrimesPost(params, options)(fetch, basePath);
        },
        /** 
         * Replace entity in EntitySet ReportedCrimes
         * @param id key: id
         * @param reportedCrime The entity to put
         */
        reportedCrimesPutById(params: {  "id": number; "reportedCrime": ReportedCrime; }, options?: any) {
            return ReportedCrimesApiFp.reportedCrimesPutById(params, options)(fetch, basePath);
        },
    };
};

